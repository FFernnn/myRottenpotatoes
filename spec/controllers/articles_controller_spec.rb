require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ArticlesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Article. As you add validations to Article, be sure to
  # adjust the attributes here as well.
#   let(:valid_attributes) {
#     skip("Add a hash of attributes valid for your model")
#   }

#   let(:invalid_attributes) {
#     skip("Add a hash of attributes invalid for your model")
#   }

#   # This should return the minimal set of values that should be in the session
#   # in order to pass any filters (e.g. authentication) defined in
#   # ArticlesController. Be sure to keep this updated too.
#   let(:valid_session) { {} }

#   describe "GET #index" do
#     it "returns a success response" do
#       Article.create! valid_attributes
#       get :index, params: {}, session: valid_session
#       expect(response).to be_successful
#     end
#   end

#   describe "GET #show" do
#     it "returns a success response" do
#       article = Article.create! valid_attributes
#       get :show, params: {id: article.to_param}, session: valid_session
#       expect(response).to be_successful
#     end
#   end

#   describe "GET #new" do
#     it "returns a success response" do
#       get :new, params: {}, session: valid_session
#       expect(response).to be_successful
#     end
#   end

#   describe "GET #edit" do
#     it "returns a success response" do
#       article = Article.create! valid_attributes
#       get :edit, params: {id: article.to_param}, session: valid_session
#       expect(response).to be_successful
#     end
#   end

#   describe "POST #create" do
#     context "with valid params" do
#       it "creates a new Article" do
#         expect {
#           post :create, params: {article: valid_attributes}, session: valid_session
#         }.to change(Article, :count).by(1)
#       end

#       it "redirects to the created article" do
#         post :create, params: {article: valid_attributes}, session: valid_session
#         expect(response).to redirect_to(Article.last)
#       end
#     end

#     context "with invalid params" do
#       it "returns a success response (i.e. to display the 'new' template)" do
#         post :create, params: {article: invalid_attributes}, session: valid_session
#         expect(response).to be_successful
#       end
#     end
#   end

#   describe "PUT #update" do
#     context "with valid params" do
#       let(:new_attributes) {
#         skip("Add a hash of attributes valid for your model")
#       }

#       it "updates the requested article" do
#         article = Article.create! valid_attributes
#         put :update, params: {id: article.to_param, article: new_attributes}, session: valid_session
#         article.reload
#         skip("Add assertions for updated state")
#       end

#       it "redirects to the article" do
#         article = Article.create! valid_attributes
#         put :update, params: {id: article.to_param, article: valid_attributes}, session: valid_session
#         expect(response).to redirect_to(article)
#       end
#     end

#     context "with invalid params" do
#       it "returns a success response (i.e. to display the 'edit' template)" do
#         article = Article.create! valid_attributes
#         put :update, params: {id: article.to_param, article: invalid_attributes}, session: valid_session
#         expect(response).to be_successful
#       end
#     end
#   end

#   describe "DELETE #destroy" do
#     it "destroys the requested article" do
#       article = Article.create! valid_attributes
#       expect {
#         delete :destroy, params: {id: article.to_param}, session: valid_session
#       }.to change(Article, :count).by(-1)
#     end

#     it "redirects to the articles list" do
#       article = Article.create! valid_attributes
#       delete :destroy, params: {id: article.to_param}, session: valid_session
#       expect(response).to redirect_to(articles_url)
#     end
#   end

# end

RSpec.describe MoviesController, :type => :controller do

  describe "Movies index" do
    it "Should render correct template" do
      get :index
      expect(response).to render_template("index")
    end
    it "Should sort by aphabet" do
      movie1 = Movie.create!({title: "Star Wars", release_date: "5/11/2018", rating: "G"})
      movie2 = Movie.create!({title: "thor", release_date: "26/10/2018", rating: "G"})
      movies = Movie.all.sort_by{|m| m.title}
      expect(movies[0].title).to eq(movie2.title)
      expect(movies[1].title).to eq(movie1.title)
    end
  end

  describe "New movie" do    
    it "Should render correct template" do
      get :new
      expect(response).to render_template("new")
    end
    it "Shoud save POST request to Database" do
      post :create, :params => {:movie => {title: "Star Wars", release_date: "5/11/2018", rating: "G", description: "..."}}
      movie = Movie.find(1)
      expect(movie.reload.title).to eq('Star Wars')
    end
    it "Should redirect to movies_path" do
      post :create, :params => {:movie => {title: "Star Wars", release_date: "5/11/2018", rating: "G"}}
      expect(response).to redirect_to('/movies/1')
    end
    it "Should create a valid movie" do
      # create blank title movie
      post :create, :params => {:movie => {title: "", release_date: "25/4/1977", rating: "PG"}}
      # invalid date
      post :create, :params => {:movie => {title: "Conjuring2nd", release_date: "11/11/2018", rating: "G"}}
      expect(Movie.all.count).to eq(0)
    end
  end

  describe "Show movie" do
    it "Should render correct template" do
      movie = Movie.create!({title: "Star Wars", release_date: "25/4/1977", rating: "PG"})
      get :show, :params => {id: movie.id}
      expect(response).to render_template("show")
    end
  end
    
  describe "Delete movie" do
    it "Should recieve DELETE request" do
      movie = Movie.create!({title: "Star Wars", release_date: "5/11/2018", rating: "G"})
      delete :destroy, :params => {id: movie.id}
      expect(Movie.all.count).to eq(0)
    end
    it "Should redirect to movies_path" do
      movie = Movie.create!({title: "Star Wars", release_date: "5/11/2018", rating: "G"})
      delete :destroy, :params => {id: movie.id}
      expect(response).to redirect_to(movies_path)
    end
  end

  describe "Edit movie" do
    it "Should recieve PUT request and save update in database" do
      movie = Movie.create!({title: "Spirit Away", release_date: "01/11/2018", rating: "G"})
      expect(movie.reload.title).to eq('Spirit Away')
      put :update, :params => {:id => movie.id, :movie => {title: "Spirited Away", description: "..."}}
      expect(movie.reload.title).to eq('Spirited Away')
      expect(movie.reload.description).to eq('...')
    end
    it "Should render correct template" do
      movie = Movie.create!({title: "Spirit Away", release_date: "01/11/2018", rating: "G"})
      get :edit, :params => {id: movie.id}
      expect(response).to render_template("edit")
    end
    it "Should redirect to edit_movie_path" do
      movie = Movie.create!({title: "Spirit Away", release_date: "01/11/2018", rating: "G"})
      put :update, :params => {:id => movie.id, :movie => {title: "Spirited Away"}}
      expect(response).to redirect_to(movie_path(movie))
    end
    it "Should save a valid movie" do
      movie = Movie.create!({title: "Spirited Away", release_date: "01/11/2018", rating: "G"})
      put :update, :params => {:id => movie.id, :movie => {title: ""}}
      expect(Movie.find(movie.id).title).to eq("Spirited Away")
    end
  end
  
end